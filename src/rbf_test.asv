clear all
close all

%% Load system points

control_cage = importdata('data/domain_ordered.ctr.asa.16', ' ', 1).data(:, [1,3]);
naca0012 = importdata('data/UIUC Aerofoil Library/Smoothed/NACA 0012-64.dat').data




%% Plot meshes
plot(control_cage(:, 1), control_cage(:, 2))
hold on
plot(naca0012(:, 1), naca0012(:, 2))



%% Build RBF system

n_1 = length(control_cage(:, 1));
n_2 = length(naca0012(:, 2));

r0 = 1;

% Preallocate matrices
A_12 = zeros(n_1, n_2);
M_22 = zeros(n_2, n_2);


% Populate M matrix
for i = 1:n_2
    for j = 1:n_2
        r = norm(naca0012(i,:) - naca0012(j,:)) / r0;
        if r <= 1
%             f = (1-r)^8 * (32*r^3 + 25*r^2 + 8*r + 1);
            f = (1-r)^4 * (4*r + 1);
%             f = (1-r)^2;
%             f = exp(-r^2);
            M_22(i,j) = f;
        end
    end
end

% Populate A_as matrix

for i = 1:n_2
    for j = 1:n_1
        r = norm(naca0012(i,:) - control_cage(j,:)) / r0;
        if r <= 1
%             f = (1-r)^8 * (32*r^3 + 25*r^2 + 8*r + 1);
            f = (1-r)^4 * (4*r + 1);
%             f = (1 - r)^2;
%             f = exp(-r^2);
            A_12(j,i) = f;
        end
    end
end

H = A_12 * inv(M_22);

%% Deform mesh
deformations = zeros(naca0012);


figure
plot(struct_nodes(:,3), F_s);

D_s = struct_nodes(:,3) .^ 2 /1000;
D_s(:) = 1;

figure
plot(struct_nodes(:,3), D_s);

D_a = D_s' * H_as';

hold on
plot(aero_nodes(:,3), D_a, 'r');
ylabel('displacement')
legend('structure','aero')

% close all
figure
hold on
plot(struct_nodes(:,3), F_s);
plot(aero_nodes(:,3), F_a);
plot(struct_nodes(:,3), F_s_nn);
plot(struct_nodes(:,3), F_s_noply)


legend('struct_rbf','aero','structure_nn')
ylabel('force')

return


%% Inverse method
% Preallocate matrices
A_12 = zeros(n_s, n_a + 4);
M = zeros(n_a, n_a);
P = zeros(4, n_a);

% Populate P matrix
P(1,:) = 1;
P(2,:) = aero_nodes(:,1);
P(3,:) = aero_nodes(:,2);
P(4,:) = aero_nodes(:,3);



% Create KD tree
MD1 = KDTreeSearcher(aero_nodes)
% Populate M matrix
disp('M matrix')
for i = 1:n_a
%     [IDx, D] = rangesearch(MD1, aero_nodes(i,:), r0);
%     r = D{1} ./ r0;
%     f = (1-r).^4 .* (4*r + 1);
%     M(i, IDx{1}) = f;
    for j = i:n_a
        r = norm(aero_nodes(i,:) - aero_nodes(j,:)) / r0;
        if r <= 1
            f = (1-r)^4 * (4*r + 1);
            M(i,j) = f;
            M(j,i) = f;
        end
    end
    if mod(i, 1000) == 0
        i
    end
end




% Populate A_as matrix
A_12(:,1) = 1;
A_12(:,2) = struct_nodes(:,1);
A_12(:,3) = struct_nodes(:,2);
A_12(:,4) = struct_nodes(:,3);

disp('A_as Matrix')
for i = 1:n_a
    for j = 1:n_s
        r = norm(aero_nodes(i,:) - struct_nodes(j,:)) / r0;
        if r <= 1
            f = (1-r)^4 * (4*r + 1);
            A_12(j, i+4) = f;
        end
    end
    if mod(i, 1000) == 0
        i
    end
end

disp('Matrix algebra')
disp('Inverse')
tic
M_inv = pinv(M);
time = toc;
% Construct C_ss matrix
disp('C_ss Construction')
C_ss = [zeros(4), P; P', M];

disp('M_p inverse')
% Construct M_p
M_p = pinv(P * M_inv * P');

disp('Solve Linear system')
% Calculate H matrix
H_sa = A_12 * [M_p * P * M_inv; M_inv - M_inv * P' * M_p * P * M_inv];

F_s = F_a' * H_sa';

figure
plot(struct_nodes(:,3), F_s);

D_a = D_s' * H_sa;
figure 
plot(aero_nodes(:,3), D_a);

